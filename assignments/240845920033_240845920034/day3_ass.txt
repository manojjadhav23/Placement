//malloc funtion

#include<stdio.h>
int main()
{
    int* ptr;
    int n,i;
    printf("enter no of element\n");
    scanf("%d",&n);
    ptr=(int*) malloc(n*sizeof(int));
    printf("accept element\n");
    for(i=0;i<n;i++)
    {
        scanf("%d",&ptr[i]);
    }
     printf("display elements\n");
        for(i=0;i<n;i++)
        printf("%d\t",ptr[i]);
        free(ptr);
}


//Delete operator

#include<iostream>
using namespace std;
int main()
{
	int *a;
	float *b;
	char *c;
	a=new int(10);
	cout<<*a<<endl;
	b=new float;
	*b=1.41f;
	cout<<*b<<endl;
	c=new char('W');
	cout<<*c<<endl;
	delete a;
		delete b;
			delete c;
}


// DMA for arrays
#include<iostream>
using namespace std;
int main()
{
	int n;
	cout<<"enter arraysize \n";
	cin>>n;
	int *arr=new int[n];
	cout<<"Enter array values\n";
	for(int i=0;i<n;i++){
		cin>>arr[i];
	}
	cout<<"Array is : ";
	for(int i=0;i<n;i++)
	{
		cout<<arr[i];
	}
	delete[] arr;
}

//Displaying gpa of number of student

#include<iostream>
using namespace std;
int main() 
{
  int num;
  cout << "Enter total number of students: ";
  cin >> num;
  float* ptr;
  ptr = new float[num];
  cout << "Enter GPA of students." << endl;
  for (int i = 0; i < num; i++) 
  {
    cout << "Student" << i + 1 << ": ";
    cin >> *(ptr + i);
  }
  cout << "\n GPA of students." << endl;
  for (int i = 0; i < num; ++i) 
  {
    cout << "Student" << i + 1 << ": " << *(ptr + i) << endl;
  }
  delete[] ptr;

  return 0;
}


//difference between malloc and new
#include<iostream>
using namespace std;
#include<stdlib.h>
class A
{
	public:
  int a;
    public:
  A()
  {
  	a=10;
  	cout << "Constructor was Called!"<<endl;
  	
  }
  void show()
  { 
   cout<<"in show()\n";
   
  }
  };
int main()
{
	//creat an object of class A using new operator 
//	A* a = new A;
//	cout << "object of class A was"
//	    <<"created using new operator!"
//	    <<endl;

A*b =(A*)malloc(sizeof(A));
   cout<<b->a;
   
   cout<< "object of class A was";
		cout<<"created using malloc()!"<<endl;
	return 0;
	
}


#include<iostream>
using namespace std;
class student
{
	
	public:
		student()
		{
			cout<<"constructor is called!\n";
		}
		~student()
		{
			cout <<"Destructor is called!\n";
		}
		// function to display massage void write()
		{
			cout << "Writing!\n";	
		};
	}
		int main ()
		{
			Student* student = new Student[3];
			//Function call to write()
			student[0].write();
			student[1].write():
			student[2].write();
			 delete[] student; //try with delete
			 
			 return 0;
			 
		}
}
